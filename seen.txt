فصل اول - شروع
کل فصل ۱ نکاتی که داشت رو نوشتم و دیدن دوباره اش وقت کشی ۱۰۰ درصد هست. برای یادگیری دیگه نبینم و همین پایینی ها رو بخونم و
خودم ور برم کافیه یا اگه لازم بود از اینجا فقط با کنترل اف سرچ کنم و پیدا کنم یا از اینترنت. اما دیدن دوباره فیلم تاکید 
میکنم وقت کشی هست.
1- سرعت پخش فیلم ها
2- مقدمه
3- پشتیبانی
4- چطوری از گیت استفاده کنیم
5- نصب گیت و vscode
6- چک کردن نصب گیت
تو لینوکس و مک، کامند+اسپیس سرچ رو باز میکنه. برای دیدن ورژن git --version رو میزنیم.
7- تنظیمات گیت
(این دستور رو نزنم. تا آخر بخونم بعد) برای دیدن تنظیماتی که تا حالا انجام شده، دستور git config --global -e رو میزنیم.
اما تو ادیتور vim که واقعا افتضاحه و دکمه backspace توش کار نمیکنه. خروج نداره، نمیشه تایپ کرد و غیره. برای این که ادیتور
رو عوض کنیم، قبل از این دستور میتونیم بنویسیم git config --global core.editor "code --wait" که بعد از
این با vscode بازش کنه و بشه مثل بچه آدم تغییرش داد. git config --global core.autocrlf true رو توی ویندوز مینویسیم و
git config --global core.autocrlf input رو توی مک و لینوکس مینویسیم که تنظیمات گیت برای تمام سیستم عامل ها یکپارچه بشه. 😒
حالا میتونم دستور git config --global -e رو بزنم که تنظیماتش رو ببینم.
8- استفاده از ترمینال قسمت 1
 با دستور touch yechizi.txt میشه یه فایل خالی ساخت تو ترمینال git bash. ولی تو cmd فرق داره. با دستور rm esme_file میتونیم
 پاکش کنیم. با clear هم تمیز میشه. البته تو cmd باید cls رو نوشت.
9- استفاده از ترمینال قسمت 2
ساخت دایرکتوری با دستور mkdir test هست. با cd میشه جابه جا شد. برای پاک کردن فولدر دستور rm جواب نمیده. باید بنویسیم
rmdir esme_directory تا پاک شه. البته اگه داخلش فایل باشه میگه که داخلش فایل هست و اول اون ها رو پاک کن بعد. اما میشه
دستور rm -rf esme_directory زد که خطرناکه و به طور ریکرسیو هر چی داخلش هست رو پاک میکنه. تو ریسایکل بین هم نمیره.
10- استفاده از ترمینال قسمت 3
با دستور echo میشه یه چیزی رو پرینت کرد. اگه چند تا کلمه باشن داخل دابل کوتیشن مینویسیم. برای ریختنش تو فایل با علامت بزرگتر
این کار رو میکنیم. اما پاک میکنه و append نمیکنه. برای append کردن دو تا علامت بزرگتر پشت سر هم میذاریم. متن داخل کوتیشن
هم نوشتم کار کرد و بدون کوتیشن هم حتی کار کرد. ولی حواسم باشه که عادت نکنم و بهتره که بذارم دابل کوتیشن رو. چون همه جا
کار نمیکنه. برای کپی کردن فایل، از دستور cp استفاده میکنیم. فایل مبدا و بعد فایل مقصد. برای انتقال از دستور mv استفاده
میکنیم. باز هم از مبدا به مقصد که مقصد فولدر هست. البته میتونیم اسم فایل هم بذاریم که در این صورت در حین انتقال، اسم فایل
رو هم عوض میکنه. یعنی اطلاعات داخل فایل قبلی ها میمونه، اما اسمش عوض میشه. که خب از همین برای تغییر نام یک فایل در پوشه
فعلی هم میشه استفاده کرد. برای دیدن همه فایل ها و فولدرها دستور ls. برای دیدن با جزییات بیشتر ls -a و برای دیدن جزییات
واقعی از ls -al استفاده میکنیم که میگه کی ساخته. کی ساخته. سطح دسترسیش چیه. برای دیدن کارنت دایرکتوری هم دستور pwd
ــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــــ
فصل دوم - گیت مقدماتی
11- روند ذخیره تغییرات در گیت به چه صورت هست؟
توضحات جالبی بود. برای خودم دیگه به درد نمیخوره. اگه بخوام دوره بسازم میتونم ازش ایده بگیرم.
12- گیت چطوری گذشته رو ذخیره میکنه؟
13- مبحث git snapshot
14- مبحث staging area
15- بریم دست به کد بشیم!
16- نحوه کامیت کردن و برسی لاگ ها
17- دستور git add
18- صورت تمرین مرور مباحث
19- پاسخ ویدئویی تمرین به همراه نکات
از اول فصل ۲ تا اینجا به کار خودم خیلی نمیاد. جالب و مفهومی بود. اما برای گفتن به بقیه. برای خودم چیز جدیدی نداشتن.
20- امکان oneline و reverse
با دستور git log --oneline میتونیم دیگه اطلاعات جزیی رو نگیریم و راحت تر به لاگ ها دسترسی داشته باشیم.
با دستور git log --reverse هم میتونیم کامیت ها رو برعکس ببینیم. یعنی اولین کامیت رو اول نشون میده. همزمان هم میشه
هر دو تا رو نوشت و ترتیبشون هم فرقی نداره.
21- سوییچ های -a و -m در کامند کامیت
خیلی مهم نیست. اما اگه فایلی رو تغییر دادیم و میخوایم با یه دستور هم اضافه اش کنیم به stage area و هم فوری بعدش
کامیت بزنیم، میتونیم بنویسیم git commit -a -m "peygham" که خودش اول همه فایل های تغییر یافته رو به استیج اضافه میکنه
و با پیغامی که نوشتیم کامیت هم میکنه. میشه به طور خلاصه تر git commit -am "peygham" هم نوشت. نکته ای که داره فایل های
جدید رو اضافه نمیکنه. یعنی برای این که فایل های تغییر داده شده رو یه کامیت برای تغییراتشون بزنیم خوبه. برای فایل هایی
که بخوایم اضافه کنیم جداگانه باید git add رو بنویسیم.
22- اصول نوشتن کامیت ها
نکته ای که داشت، وقتی گیت کامیت خالی بدون -m میزد، تو vscode بعد از خط اول، ۲ تا اینتر زد و چیزهایی که نوشت اونا دیگه
نیومدن. در واقع بدنه کامیت هستن که توضیحات طولانی رو میشه اونجا نوشت که حالت عادی وقتی گیت لاگ میزنیم اذیت نکنه. اما
توضیح بیشتری راجع به اون کامیت اگه داریم میشه نوشت.
23- حذف فایل کامیت شده از پروژه
24- دستور git rm
وقتی یه فایلی رو پاک میکنیم، برای این که به گیت هم بفهمونیم بعدش باید بگیم git add esme_file که گیت بفهمه پاک شدن اون
فایل حالت جدیدی از استیجینگ اریا هست و بعد کامیتش کنیم. حالا اگه بخوایم خود گیت یه فایلی رو پاک کنه و به استیجینگ اریا
هم ببره، میتونیم این ۲ تا مرحله رو یکی کنیم. یعنی به جای این که فایل رو پاک کنیم و بعد بنویسیم git add file_e_paak_shode
به جاش تو یه مرحله مینویسیم git rm esme_file و این طوری خودش فایل رو پاک میکنه و به استیجینگ اریا هم میره. یعنی لازم نیست
دیگه برای اون فایل git add رو بنویسیم و یه مرحله کوتاه تر میشه. اما کامیت نمیکنه. چون شاید بخوایم اون فایل رو برگردونیم
و یا بخوایم تغییرات دیگه رو هم همراه با اون کامیت اعمال کنیم.
25- الگو در انتخاب فایل ها
جالب بود. در مورد کار با فایل ها و آدرس دهی بود. رو اونا مسلط بشم اینم حله. نکته جدیدی از گیت نداشت. مثل همون نامگذاری
فایل ها اینا هست که مثلا *.txt یعنی همه فایل های با پسوند txt در فولدر فعلی و یا */*/*.txt یعنی همه فایل ها با پسوند txt
در این فولدر و فولدرهای داخلیش و فولدرهای داخلی اونها.
26- حذف از ایندکس
جالب بود. برای درک مفهومی بهتر خوب بود. ولی خیلی هم خاص نبود و نکته ای نداشت.
27- نظر شما
28- تغییر نام با git mv
وقتی یه فایلی رو rename میکنیم، برای شناسوندن به گیت، باید بهش بگیم پاک کردن یک فایل رو به استیجینگ اریا اضافه کنه و ساخته
شدن فایل جدید رو هم به استیجینگ اریا اضافه کنه و دو تا فایل رو باید اضافه کنیم. بعد خودش با توجه به محتویات متوجه میشه که
عملی که انجام دادیم rename هست. برای راحتی کار میتونیم به گیت بگیم rename کنه که دیگه ما هم زیاد ننویسم. مثلا برای تغییر نام
فایل 1.txt به 2.txt میشه نوشت git mv 1.txt 2.txt که خودش رینیم میکنه و چون تو استیجینگ اریا بود، کافیه کامیتش کنیم بعد.
اگه از طریق سیستم عامل یک فایل رو rename کنیم که خب با دستور گیت انجام ندادیم و اونجا باید دو تا رو جداگانه add کنیم یا اگه
میشد با git add . یا git add *.py و این جور چیزا اضافه کنیم.
29- درک wd و sa و repo
wd ورکینگ دایرکتوری هست. sa استیجینگ اریا و repo هم ریپازیتوری. از نظر مفهومی خیلی ویدیو خوب و پرباری بود. خیلی جالب بود و
واقعا عالی توضیح داد. مجدد هم ببینم حتما فایده داره. هیچ کدی نزد و فقط توضیح بود. اما توضیح مفهومی و عالی تفاوت های حالت های
ترک نشده و استیج شده و کامیت شده.
30- دستور git status -s
خیلی توضحات باحالی داشت و جالب بود. اینجا دیگه نمینویسم باید کار کنم باهاش تا دستم بیاد. دیدن دوباره ویدیو هم بد نیست. اما
کار کردن با این دستور هست که باعث میشه خوب یاد بگیرم.
31- دستور مهم git diff
این ویدیو و بعدی، راجع به دستور git diff بود. با دستور git diff، تفاوت تمام فایل های تغییر یافته رو در ورکینگ دایرکتوری با
استیجینگ اریا بهمون میگه. اگه بخوایم برای یه فایل خاص رو ببینیم اسمش رو هم مینویسیم مثلا git diff test.py که تفاوت تمام فایل ها
رو دیگه نمیده. فقط همون فایل که ورکینگ دایرکتوری با استیجینگ اریا چه فرقی داره. تو ویدیو بعدی میگه که اگه بخوایم تفاوت
استیجینگ اریا با ریپازیتوری رو ببینیم از git diff --staged استفاده میکنیم که اگه فایل رو ننویسیم تفاوت تمام فایل های استیجینگ
اریا با ریپازیتوری رو میده و اگه بنویسیم فقط همون مورد رو.
32- دستور diff برای stage
33- عملیات git diff در vscode
راجع به کار کردن با قسمت سورس کنترل وی اس کد گفت که جالب بود. نوشتن خیلی فایده نداره. کار کنم دستم بیاد بهتره.
34- درخواست
35- نکته مهم difftool
36- تنظیمات difftool
خیلی متوجه نشدم که چرا اون کار رو کرد. بعدها که چند تا پروژه کار کردم و با گیت به مشکل خوردم شاید اون موقع متوجه بشم. اما الان
به نظرم فایده ای نداره.
37- دستور مهم git restore
